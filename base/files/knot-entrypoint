#!/bin/sh
set -e

# Get the KNOT_USER if not set then set it to knot
export KNOT_USER=${KNOT_USER:-knot}

# Write the variables to /etc/environment if they are defined
if [ "${KNOT_USER:-}" ]; then
  echo "KNOT_USER=$KNOT_USER" >> /etc/environment
fi
if [ "${KNOT_WILDCARD_DOMAIN:-}" ]; then
  echo "KNOT_WILDCARD_DOMAIN=$KNOT_WILDCARD_DOMAIN" >> /etc/environment
fi
if [ "${KNOT_SPACEID:-}" ]; then
  echo "KNOT_SPACEID=$KNOT_SPACEID" >> /etc/environment
fi

# If KNOT_SERVICE_PASSWORD is defined then use it; else use a uuid
if [ -z "${KNOT_SERVICE_PASSWORD}" ]; then
  KNOT_SERVICE_PASSWORD=$(uuidgen)
  export KNOT_SERVICE_PASSWORD
fi

echo "Creating user ${KNOT_USER}.."
echo "${KNOT_USER} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/${KNOT_USER}
chmod 0440 /etc/sudoers.d/${KNOT_USER}

# If the home directory exists then create the user without a home otherwise create with home
if [ -d "/home/${KNOT_USER}" ]; then
  useradd ${KNOT_USER} \
    --uid 1000 \
    --user-group \
    --no-create-home \
    --shell /bin/bash
else
  useradd ${KNOT_USER} \
    --uid 1000 \
    --user-group \
    --create-home \
    --shell /bin/bash

  mkdir -p /home/${KNOT_USER}/.ssh && chmod 0700 /home/${KNOT_USER}/.ssh && chown -R ${KNOT_USER}:${KNOT_USER} /home/${KNOT_USER}/.ssh
  mkdir -p /home/${KNOT_USER}/.local/lib /home/${KNOT_USER}/.local/bin && chown -R ${KNOT_USER}:${KNOT_USER} /home/${KNOT_USER}/.local
fi

usermod -aG ssl-cert $KNOT_USER

# Check home is owned by the user; else fix
if [ $(stat -c '%U:%G' /home/${KNOT_USER}) != "${KNOT_USER}:${KNOT_USER}" ]; then
  echo "Changing file ownership.."
  chown ${KNOT_USER}:${KNOT_USER} -R /home/${KNOT_USER}
fi

export HOME=/home/${KNOT_USER}
cd /home/${KNOT_USER}

# If KNOT_SSH is defined then start SSH Server
if [ "${KNOT_SSH_PORT:-}" ]; then
	# Start SSH Server
  echo "Starting SSH Server.."
	/usr/sbin/sshd
fi

# If KNOT_CODE_SERVER_PORT is defined then start code-server
if [ "${KNOT_CODE_SERVER_PORT:-}" ]; then
  # Fetch the latest version of code-server
  gosu ${KNOT_USER} /usr/local/bin/knot-fetch-code-server

	# Start code-server
  echo "Starting code-server.."
	gosu ${KNOT_USER} ~/.local/bin/code-server --disable-telemetry --auth none --bind-addr 127.0.0.1:${KNOT_CODE_SERVER_PORT} >/tmp/code-server.log 2>&1 &
fi

# If KNOT_VSCODE_TUNNEL is defined then start code tunnel
if [ "${KNOT_VSCODE_TUNNEL:-}" ]; then
  # Fetch the latest version of code
  gosu ${KNOT_USER} /usr/local/bin/knot-fetch-vscode

  # Start code tunnel
  echo "Starting Visual Studio Code tunnel.."
  gosu ${KNOT_USER} screen -dmS ${KNOT_VSCODE_TUNNEL} /usr/local/bin/knot-run-vscode
fi

# Make KNOT_USER available in called scripts
export KNOT_USER

# If the folder /etc/knot-startup.d/ exists then run all scripts in it
if [ -d /etc/knot-startup.d/ ]; then
  for f in /etc/knot-startup.d/*; do
    echo "Running startup script $f"
    bash $f
  done
fi

# If the folder /home/${KNOT_USER}/.knot-startup.d/ exists then run all scripts in it
if [ -d /home/${KNOT_USER}/.knot-startup.d/ ]; then
  for f in /home/${KNOT_USER}/.knot-startup.d/*; do
    echo "Running startup script $f"
    gosu ${KNOT_USER} bash $f
  done
fi

# If KNOT_SERVER is defined
if [ "${KNOT_SERVER:-}" ]; then

	# Get the host architecture, arm64 or amd64
	ARCH=$(uname -m)
  case "$ARCH" in
		'x86_64') url="knot_agent_linux_amd64";;
		'aarch64') url="knot_agent_linux_arm64";;
		*) echo >&2 "error: unsupported architecture: '$ARCH'"; exit 1 ;;
	esac

  echo "Fetching agent binary for $ARCH"

	# Download the application from the server
  curl -sLk ${KNOT_SERVER}/agents/$url.zip | funzip > /usr/local/bin/knot-agent
	chmod +x /usr/local/bin/knot-agent
fi

if [ -z "$@" ]; then
  # Check for /usr/local/bin/knot and if present run it
  if [ -x /usr/local/bin/knot-agent ]; then

    # If KNOT_DNS_LISTEN is defined update /etc/resolv.conf to use agent for DNS forwarding
    if [ "${KNOT_DNS_LISTEN:-}" ]; then
      echo "Updating /etc/resolv.conf to use agent for DNS forwarding"

      # Get the search line from /etc/resolv.conf if present
      SEARCH=$(grep -i '^search' /etc/resolv.conf | awk '{print $2}')

      # Create new /etc/resolv.conf
      echo "nameserver 127.0.0.1" > /etc/resolv.conf

      # Add search line if present
      if [ "${SEARCH}" ]; then
        echo "search ${SEARCH}" >> /etc/resolv.conf
      fi

      # Allow the agent to bind to low ports
      setcap CAP_NET_BIND_SERVICE=+eip /usr/local/bin/knot-agent
    fi

    echo "Running knot agent..."
    exec gosu ${KNOT_USER} /usr/local/bin/knot-agent agent
  else
    echo "Running..."
    while true; do sleep infinity; done
  fi
else
  echo "Running command..."
  exec gosu ${KNOT_USER} "$@"
fi
