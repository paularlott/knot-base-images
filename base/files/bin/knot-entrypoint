#!/bin/sh
set -e

# Get the KNOT_USER if not set then set it to knot
export KNOT_USER=${KNOT_USER:-knot}

# Write the variables to /etc/environment if they are defined
if [ "${KNOT_USER:-}" ]; then
  echo "KNOT_USER=$KNOT_USER" >> /etc/environment
fi
if [ "${KNOT_WILDCARD_DOMAIN:-}" ]; then
  echo "KNOT_WILDCARD_DOMAIN=$KNOT_WILDCARD_DOMAIN" >> /etc/environment
fi
if [ "${KNOT_SPACEID:-}" ]; then
  echo "KNOT_SPACEID=$KNOT_SPACEID" >> /etc/environment
fi

# If KNOT_SERVICE_PASSWORD is defined then use it; else use a uuid
if [ -z "${KNOT_SERVICE_PASSWORD}" ]; then
  KNOT_SERVICE_PASSWORD=$(uuidgen)
  export KNOT_SERVICE_PASSWORD
fi

echo "Creating user ${KNOT_USER}.."
echo "${KNOT_USER} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/${KNOT_USER}
chmod 0440 /etc/sudoers.d/${KNOT_USER}

# Check if the user already exists
if id -u ${KNOT_USER} >/dev/null 2>&1; then
  echo "User ${KNOT_USER} already exists. Skipping user creation."
else
  # Check if user has changed i.e. space passed to a new user, compare the contents of /home/.knot-user with $KNOT_USER
  # if they don't match then rename the old home directory to the new user, if it exists
  if [ -f /home/.knot-user ]; then
    OLD_USER=$(cat /home/.knot-user)
    if [ "$OLD_USER" != "$KNOT_USER" ] && [ -d "/home/$OLD_USER" ]; then
      echo "Renaming home directory from /home/$OLD_USER to /home/$KNOT_USER"
      mv /home/$OLD_USER /home/$KNOT_USER
    fi
  fi

  # Remember the user in /home/.knot-user
  echo $KNOT_USER > /home/.knot-user

  # If the home directory exists then create the user without a home otherwise create with home
  if [ -d "/home/${KNOT_USER}" ]; then
    useradd ${KNOT_USER} \
      --uid 1000 \
      --user-group \
      --no-create-home \
      --shell /bin/bash
  else
    useradd ${KNOT_USER} \
      --uid 1000 \
      --user-group \
      --create-home \
      --shell /bin/bash

    mkdir -p /home/${KNOT_USER}/.ssh && chmod 0700 /home/${KNOT_USER}/.ssh && chown -R ${KNOT_USER}:${KNOT_USER} /home/${KNOT_USER}/.ssh
    mkdir -p /home/${KNOT_USER}/.local/lib /home/${KNOT_USER}/.local/bin && chown -R ${KNOT_USER}:${KNOT_USER} /home/${KNOT_USER}/.local
  fi

  usermod -aG ssl-cert $KNOT_USER
fi

# Check home is owned by the user; else fix
if [ $(stat -c '%U:%G' /home/${KNOT_USER}) != "${KNOT_USER}:${KNOT_USER}" ]; then
  echo "Changing file ownership.."
  chown ${KNOT_USER}:${KNOT_USER} -R /home/${KNOT_USER}
fi

export HOME=/home/${KNOT_USER}
cd /home/${KNOT_USER}

# If KNOT_SERVER is defined then fetch the agent and start it
if [ "${KNOT_SERVER:-}" ]; then

  # Get the host architecture, arm64 or amd64
  ARCH=$(uname -m)
  case "$ARCH" in
    'x86_64') url="knot_agent_linux_amd64";;
    'aarch64') url="knot_agent_linux_arm64";;
    *) echo >&2 "error: unsupported architecture: '$ARCH'"; exit 1 ;;
  esac

  echo "Fetching agent binary for $ARCH"

  # Download the application from the server
  if ! curl -sLk ${KNOT_SERVER}/agents/$url.zip | funzip > /usr/local/bin/knot; then
    echo >&2 "error: failed to fetch agent binary"
    exit 1
  fi
  chmod +x /usr/local/bin/knot

  # If KNOT_DNS_LISTEN is defined update /etc/resolv.conf to use agent for DNS forwarding
  if [ "${KNOT_DNS_LISTEN:-}" ]; then
    echo "Updating /etc/resolv.conf to use agent for DNS forwarding"

    # Get the search line from /etc/resolv.conf if present
    SEARCH=$(grep -i '^search' /etc/resolv.conf | awk '{print $2}')

    # Create new /etc/resolv.conf
    echo "nameserver 127.0.0.1" > /etc/resolv.conf

    # Add search line if present
    if [ "${SEARCH}" ]; then
      echo "search ${SEARCH}" >> /etc/resolv.conf
    fi

    # Allow the agent to bind to low ports
    setcap CAP_NET_BIND_SERVICE=+eip /usr/local/bin/knot
  fi

  echo "Starting knot agent..."
  gosu ${KNOT_USER} /usr/local/bin/knot agent 2>&1 &
  agent_pid=$!
fi

# If KNOT_SYSLOG_PORT is not defined or not 0 then route to agents syslogd port
if [ -x /usr/local/bin/knot ] && [ "${KNOT_SYSLOG_PORT:-1}" -ne 0 ]; then
  echo "Forwarding logs to knot agent syslogd port ${KNOT_SYSLOG_PORT:-514}"
  echo "*.* @127.0.0.1:${KNOT_SYSLOG_PORT:-514}" > /etc/rsyslog.d/99-knotagent.conf
fi

echo "Starting rsyslogd.."
rsyslogd

# Make KNOT_USER available in called scripts
export KNOT_USER

# If the folder /etc/knot-startup.d/ exists then run all scripts in it
if [ -d /etc/knot-startup.d/ ]; then
  for f in /etc/knot-startup.d/*; do
    if [ -f "$f" ]; then
      logger -p local0.info "Running startup script $f"
      bash $f
    fi
  done
fi

# If the folder /home/${KNOT_USER}/.knot-startup.d/ exists then run all scripts in it
if [ -d /home/${KNOT_USER}/.knot-startup.d/ ]; then
  for f in /home/${KNOT_USER}/.knot-startup.d/*; do
    if [ -f "$f" ]; then
      logger -p local0.info "Running user startup script $f"
      gosu ${KNOT_USER} bash $f
    fi
  done
fi

if [ -z "$@" ]; then
  logger -p local0.info "System started..."
  wait $agent_pid
else
  logger -p local0.info "Running command..."
  exec gosu ${KNOT_USER} "$@"
fi
